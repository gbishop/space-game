!function(I){var g={};function C(e){if(g[e])return g[e].exports;var n=g[e]={i:e,l:!1,exports:{}};return I[e].call(n.exports,n,n.exports,C),n.l=!0,n.exports}C.m=I,C.c=g,C.d=function(I,g,e){C.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:e})},C.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},C.t=function(I,g){if(1&g&&(I=C(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var e=Object.create(null);if(C.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var n in I)C.d(e,n,function(g){return I[g]}.bind(null,n));return e},C.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return C.d(g,"a",g),g},C.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},C.p="",C(C.s=1)}([function(module,exports){eval("module.exports = Phaser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJQaGFzZXJcIj9lYmM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFBoYXNlcjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: external "Phaser"\nvar external_Phaser_ = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/base.ts\n\nclass SwitchBase extends Phaser.Scene {\n    constructor(args) {\n        super(args);\n        this.initialized = false;\n    }\n    getUserInput(choices, correct, func) {\n        if (!this.initialized) {\n            this.events.on("resume", (s, d) => this.userInput(d.choice));\n            /* There is a bug in run, now fixed but not yet released that makes\n             * it recreate instead of restarting a paused scene. I\'ll work around\n             * that by always resuming but I\'ll first need to run to get it started.\n             * I\'ll remove this when run gets released */\n            this.scene.run("ControlScene");\n            this.scene.pause("ControlScene");\n            this.initialized = true;\n        }\n        let inputConfig = { caller: this.scene.key, choices, correct };\n        this.scene.resume("ControlScene", inputConfig);\n        this.scene.pause();\n        this.callback = func;\n    }\n    userInput(choice) {\n        // this method will be called with the user\'s response\n        this.callback(choice);\n    }\n}\nclass ControlScene extends Phaser.Scene {\n    constructor() {\n        super({\n            key: "ControlScene"\n        });\n    }\n    returnInput(value) {\n        this.scene.resume(this.inputConfig.caller, { choice: value });\n        this.scene.pause();\n    }\n    create() {\n        console.log("create control");\n        this.input.keyboard.on("keydown-LEFT", (e) => {\n            // pass response back to caller\n            this.returnInput(0);\n        });\n        this.input.keyboard.on("keydown-RIGHT", (e) => {\n            // pass response back to caller\n            this.returnInput(1);\n        });\n        this.events.on("resume", (e, d) => {\n            this.inputConfig = d;\n            this.scene.pause(d.caller);\n        });\n        document\n            .getElementById("left")\n            .addEventListener("click", e => this.returnInput(0));\n        document\n            .getElementById("right")\n            .addEventListener("click", e => this.returnInput(1));\n        this.input.keyboard.on("keydown-SPACE", (e) => {\n            const choices = document.querySelectorAll("button.choice");\n            let selected = document.querySelector("button.selected");\n            let i = 0;\n            if (selected) {\n                i = ([...choices].indexOf(selected) + 1) % choices.length;\n                selected.classList.remove("selected");\n            }\n            choices[i].classList.add("selected");\n        });\n        this.input.keyboard.on("keydown-ENTER", (e) => {\n            const selected = (document.querySelector("button.selected"));\n            if (selected) {\n                selected.click();\n            }\n        });\n    }\n}\n\n// CONCATENATED MODULE: ./src/game.ts\n\n\nclass game_GameScene extends SwitchBase {\n    constructor() {\n        super({\n            key: "GameScene"\n        });\n        this.elapsed = 0;\n        this.previous = 0; // previous elapsed\n        this.period = 2; // time per cycle\n        this.canvas = document.querySelector("canvas");\n        this.lane = 0;\n        this.rocket_lane = 1;\n        this.rocket_y = 0;\n        this.sign = 1;\n        this.freq = 1.5;\n    }\n    preload() {\n        this.load.image("alien", "assets/alien.png");\n        this.load.image("rocket", "assets/rocket.png");\n        this.load.image("particle", "assets/particle.png");\n    }\n    create() {\n        console.log("create game");\n        this.rocket_y = this.canvas.height * 0.9;\n        this.alien = this.add.sprite(this.canvas.width / 2, 10, "alien");\n        this.rocket = this.add.sprite((3 * this.canvas.width) / 4, this.rocket_y, "rocket");\n        // Enable physics on rocket and alien sprites\n        this.physics.world.enable([this.rocket, this.alien]);\n        this.physics.add.overlap(this.rocket, this.alien, this.rocketCollideWithAlien, null, this);\n        this.particles = this.add.particles("particle");\n        this.emitter = this.particles.createEmitter({\n            angle: { min: 0, max: 360 },\n            speed: { min: 50, max: 200 },\n            quantity: { min: 40, max: 50 },\n            lifespan: { min: 200, max: 500 },\n            alpha: { start: 1, end: 0 },\n            scale: { min: 0.5, max: 0.5 },\n            rotate: { start: 0, end: 360 },\n            gravityY: 800,\n            on: false\n        });\n        this.reset();\n    }\n    reset() {\n        const w = this.canvas.width;\n        this.elapsed = 0;\n        this.lane = Phaser.Math.Between(0, 1);\n        this.sign = 2 * Phaser.Math.Between(0, 1) - 1;\n        this.freq = 0.5 + Math.random() * 2;\n        this.rocket.x = w / 4 + (w / 2) * this.rocket_lane;\n        this.alien.setVisible(true);\n    }\n    update(time, delta) {\n        const w = this.canvas.width;\n        const h = this.canvas.height;\n        this.previous = this.elapsed;\n        this.elapsed += delta * 0.001;\n        // update when the period is exceeded\n        if (this.elapsed > this.period) {\n            this.reset();\n        }\n        // pause when we pass the decision time\n        const decision_time = this.period * 0.5;\n        if (this.previous < decision_time && this.elapsed >= decision_time) {\n            this.getUserInput(["left", "right"], this.lane, (v) => (this.rocket_lane = v));\n        }\n        const u = this.elapsed / this.period;\n        const goal_x = w / 4 + (this.lane * w) / 2;\n        const wiggle = (w / 2) * (1 + this.sign * Math.sin(2 * Math.PI * this.freq * u));\n        const v = Math.min(1, (h / this.rocket_y) * u);\n        this.alien.x = (1 - v) * wiggle + v * goal_x;\n        this.alien.y = this.canvas.height * u;\n        const rocket_x = w / 4 + (this.rocket_lane * w) / 2;\n        this.rocket.x -= (this.rocket.x - rocket_x) / 10;\n    }\n    rocketCollideWithAlien() {\n        // flash\n        this.cameras.main.flash();\n        // Hide the alien\n        this.alien.setVisible(false);\n        // blowup\n        this.particles.emitParticleAt(this.alien.x, this.alien.y);\n    }\n}\n\n// CONCATENATED MODULE: ./src/app.ts\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MyGame", function() { return MyGame; });\n\n\n\nconst config = {\n    title: "Runner",\n    type: Phaser.AUTO,\n    width: 600,\n    height: 800,\n    /*\n    scale: {\n      mode: Phaser.Scale.FIT,\n      autoCenter: Phaser.Scale.CENTER_BOTH\n    }, */\n    parent: "game",\n    scene: [game_GameScene, ControlScene],\n    physics: {\n        default: "arcade",\n        arcade: {\n            debug: false\n        }\n    },\n    backgroundColor: "#444444"\n};\nclass MyGame extends Phaser.Game {\n    constructor(config) {\n        super(config);\n    }\n}\nwindow.onload = () => {\n    var game = new MyGame(config);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS50cz9hZTgzIiwid2VicGFjazovLy8uL3NyYy9nYW1lLnRzP2FhZmMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC50cz9mMWIyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFnQjtBQUNUO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxvREFBb0QsZ0JBQWdCO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7O0FDMUVnQjtBQUNvQjtBQUM3QixNQUFNLGNBQVMsU0FBUyxVQUFVO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDBCQUEwQjtBQUMxQix3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsbUJBQW1CO0FBQ3ZDLG9CQUFvQixvQkFBb0I7QUFDeEMsdUJBQXVCLG1CQUFtQjtBQUMxQyx1QkFBdUIscUJBQXFCO0FBQzVDLG9CQUFvQixtQkFBbUI7QUFDdkMsb0JBQW9CLHFCQUFxQjtBQUN6QyxxQkFBcUIscUJBQXFCO0FBQzFDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3BGQTtBQUFnQjtBQUNzQjtBQUNIO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLFlBQVksY0FBUyxFQUFFLFlBQVk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwicGhhc2VyXCI7XG5leHBvcnQgY2xhc3MgU3dpdGNoQmFzZSBleHRlbmRzIFBoYXNlci5TY2VuZSB7XG4gICAgY29uc3RydWN0b3IoYXJncykge1xuICAgICAgICBzdXBlcihhcmdzKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIH1cbiAgICBnZXRVc2VySW5wdXQoY2hvaWNlcywgY29ycmVjdCwgZnVuYykge1xuICAgICAgICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLm9uKFwicmVzdW1lXCIsIChzLCBkKSA9PiB0aGlzLnVzZXJJbnB1dChkLmNob2ljZSkpO1xuICAgICAgICAgICAgLyogVGhlcmUgaXMgYSBidWcgaW4gcnVuLCBub3cgZml4ZWQgYnV0IG5vdCB5ZXQgcmVsZWFzZWQgdGhhdCBtYWtlc1xuICAgICAgICAgICAgICogaXQgcmVjcmVhdGUgaW5zdGVhZCBvZiByZXN0YXJ0aW5nIGEgcGF1c2VkIHNjZW5lLiBJJ2xsIHdvcmsgYXJvdW5kXG4gICAgICAgICAgICAgKiB0aGF0IGJ5IGFsd2F5cyByZXN1bWluZyBidXQgSSdsbCBmaXJzdCBuZWVkIHRvIHJ1biB0byBnZXQgaXQgc3RhcnRlZC5cbiAgICAgICAgICAgICAqIEknbGwgcmVtb3ZlIHRoaXMgd2hlbiBydW4gZ2V0cyByZWxlYXNlZCAqL1xuICAgICAgICAgICAgdGhpcy5zY2VuZS5ydW4oXCJDb250cm9sU2NlbmVcIik7XG4gICAgICAgICAgICB0aGlzLnNjZW5lLnBhdXNlKFwiQ29udHJvbFNjZW5lXCIpO1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGlucHV0Q29uZmlnID0geyBjYWxsZXI6IHRoaXMuc2NlbmUua2V5LCBjaG9pY2VzLCBjb3JyZWN0IH07XG4gICAgICAgIHRoaXMuc2NlbmUucmVzdW1lKFwiQ29udHJvbFNjZW5lXCIsIGlucHV0Q29uZmlnKTtcbiAgICAgICAgdGhpcy5zY2VuZS5wYXVzZSgpO1xuICAgICAgICB0aGlzLmNhbGxiYWNrID0gZnVuYztcbiAgICB9XG4gICAgdXNlcklucHV0KGNob2ljZSkge1xuICAgICAgICAvLyB0aGlzIG1ldGhvZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSB1c2VyJ3MgcmVzcG9uc2VcbiAgICAgICAgdGhpcy5jYWxsYmFjayhjaG9pY2UpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDb250cm9sU2NlbmUgZXh0ZW5kcyBQaGFzZXIuU2NlbmUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBrZXk6IFwiQ29udHJvbFNjZW5lXCJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybklucHV0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2NlbmUucmVzdW1lKHRoaXMuaW5wdXRDb25maWcuY2FsbGVyLCB7IGNob2ljZTogdmFsdWUgfSk7XG4gICAgICAgIHRoaXMuc2NlbmUucGF1c2UoKTtcbiAgICB9XG4gICAgY3JlYXRlKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImNyZWF0ZSBjb250cm9sXCIpO1xuICAgICAgICB0aGlzLmlucHV0LmtleWJvYXJkLm9uKFwia2V5ZG93bi1MRUZUXCIsIChlKSA9PiB7XG4gICAgICAgICAgICAvLyBwYXNzIHJlc3BvbnNlIGJhY2sgdG8gY2FsbGVyXG4gICAgICAgICAgICB0aGlzLnJldHVybklucHV0KDApO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pbnB1dC5rZXlib2FyZC5vbihcImtleWRvd24tUklHSFRcIiwgKGUpID0+IHtcbiAgICAgICAgICAgIC8vIHBhc3MgcmVzcG9uc2UgYmFjayB0byBjYWxsZXJcbiAgICAgICAgICAgIHRoaXMucmV0dXJuSW5wdXQoMSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV2ZW50cy5vbihcInJlc3VtZVwiLCAoZSwgZCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbnB1dENvbmZpZyA9IGQ7XG4gICAgICAgICAgICB0aGlzLnNjZW5lLnBhdXNlKGQuY2FsbGVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRvY3VtZW50XG4gICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJsZWZ0XCIpXG4gICAgICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGUgPT4gdGhpcy5yZXR1cm5JbnB1dCgwKSk7XG4gICAgICAgIGRvY3VtZW50XG4gICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJyaWdodFwiKVxuICAgICAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBlID0+IHRoaXMucmV0dXJuSW5wdXQoMSkpO1xuICAgICAgICB0aGlzLmlucHV0LmtleWJvYXJkLm9uKFwia2V5ZG93bi1TUEFDRVwiLCAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hvaWNlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJidXR0b24uY2hvaWNlXCIpO1xuICAgICAgICAgICAgbGV0IHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJ1dHRvbi5zZWxlY3RlZFwiKTtcbiAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIGkgPSAoWy4uLmNob2ljZXNdLmluZGV4T2Yoc2VsZWN0ZWQpICsgMSkgJSBjaG9pY2VzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZC5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0ZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaG9pY2VzW2ldLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaW5wdXQua2V5Ym9hcmQub24oXCJrZXlkb3duLUVOVEVSXCIsIChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uLnNlbGVjdGVkXCIpKTtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkLmNsaWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCBcInBoYXNlclwiO1xuaW1wb3J0IHsgU3dpdGNoQmFzZSB9IGZyb20gXCIuL2Jhc2VcIjtcbmV4cG9ydCBjbGFzcyBHYW1lU2NlbmUgZXh0ZW5kcyBTd2l0Y2hCYXNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAga2V5OiBcIkdhbWVTY2VuZVwiXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVsYXBzZWQgPSAwO1xuICAgICAgICB0aGlzLnByZXZpb3VzID0gMDsgLy8gcHJldmlvdXMgZWxhcHNlZFxuICAgICAgICB0aGlzLnBlcmlvZCA9IDI7IC8vIHRpbWUgcGVyIGN5Y2xlXG4gICAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImNhbnZhc1wiKTtcbiAgICAgICAgdGhpcy5sYW5lID0gMDtcbiAgICAgICAgdGhpcy5yb2NrZXRfbGFuZSA9IDE7XG4gICAgICAgIHRoaXMucm9ja2V0X3kgPSAwO1xuICAgICAgICB0aGlzLnNpZ24gPSAxO1xuICAgICAgICB0aGlzLmZyZXEgPSAxLjU7XG4gICAgfVxuICAgIHByZWxvYWQoKSB7XG4gICAgICAgIHRoaXMubG9hZC5pbWFnZShcImFsaWVuXCIsIFwiYXNzZXRzL2FsaWVuLnBuZ1wiKTtcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKFwicm9ja2V0XCIsIFwiYXNzZXRzL3JvY2tldC5wbmdcIik7XG4gICAgICAgIHRoaXMubG9hZC5pbWFnZShcInBhcnRpY2xlXCIsIFwiYXNzZXRzL3BhcnRpY2xlLnBuZ1wiKTtcbiAgICB9XG4gICAgY3JlYXRlKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImNyZWF0ZSBnYW1lXCIpO1xuICAgICAgICB0aGlzLnJvY2tldF95ID0gdGhpcy5jYW52YXMuaGVpZ2h0ICogMC45O1xuICAgICAgICB0aGlzLmFsaWVuID0gdGhpcy5hZGQuc3ByaXRlKHRoaXMuY2FudmFzLndpZHRoIC8gMiwgMTAsIFwiYWxpZW5cIik7XG4gICAgICAgIHRoaXMucm9ja2V0ID0gdGhpcy5hZGQuc3ByaXRlKCgzICogdGhpcy5jYW52YXMud2lkdGgpIC8gNCwgdGhpcy5yb2NrZXRfeSwgXCJyb2NrZXRcIik7XG4gICAgICAgIC8vIEVuYWJsZSBwaHlzaWNzIG9uIHJvY2tldCBhbmQgYWxpZW4gc3ByaXRlc1xuICAgICAgICB0aGlzLnBoeXNpY3Mud29ybGQuZW5hYmxlKFt0aGlzLnJvY2tldCwgdGhpcy5hbGllbl0pO1xuICAgICAgICB0aGlzLnBoeXNpY3MuYWRkLm92ZXJsYXAodGhpcy5yb2NrZXQsIHRoaXMuYWxpZW4sIHRoaXMucm9ja2V0Q29sbGlkZVdpdGhBbGllbiwgbnVsbCwgdGhpcyk7XG4gICAgICAgIHRoaXMucGFydGljbGVzID0gdGhpcy5hZGQucGFydGljbGVzKFwicGFydGljbGVcIik7XG4gICAgICAgIHRoaXMuZW1pdHRlciA9IHRoaXMucGFydGljbGVzLmNyZWF0ZUVtaXR0ZXIoe1xuICAgICAgICAgICAgYW5nbGU6IHsgbWluOiAwLCBtYXg6IDM2MCB9LFxuICAgICAgICAgICAgc3BlZWQ6IHsgbWluOiA1MCwgbWF4OiAyMDAgfSxcbiAgICAgICAgICAgIHF1YW50aXR5OiB7IG1pbjogNDAsIG1heDogNTAgfSxcbiAgICAgICAgICAgIGxpZmVzcGFuOiB7IG1pbjogMjAwLCBtYXg6IDUwMCB9LFxuICAgICAgICAgICAgYWxwaGE6IHsgc3RhcnQ6IDEsIGVuZDogMCB9LFxuICAgICAgICAgICAgc2NhbGU6IHsgbWluOiAwLjUsIG1heDogMC41IH0sXG4gICAgICAgICAgICByb3RhdGU6IHsgc3RhcnQ6IDAsIGVuZDogMzYwIH0sXG4gICAgICAgICAgICBncmF2aXR5WTogODAwLFxuICAgICAgICAgICAgb246IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICBjb25zdCB3ID0gdGhpcy5jYW52YXMud2lkdGg7XG4gICAgICAgIHRoaXMuZWxhcHNlZCA9IDA7XG4gICAgICAgIHRoaXMubGFuZSA9IFBoYXNlci5NYXRoLkJldHdlZW4oMCwgMSk7XG4gICAgICAgIHRoaXMuc2lnbiA9IDIgKiBQaGFzZXIuTWF0aC5CZXR3ZWVuKDAsIDEpIC0gMTtcbiAgICAgICAgdGhpcy5mcmVxID0gMC41ICsgTWF0aC5yYW5kb20oKSAqIDI7XG4gICAgICAgIHRoaXMucm9ja2V0LnggPSB3IC8gNCArICh3IC8gMikgKiB0aGlzLnJvY2tldF9sYW5lO1xuICAgICAgICB0aGlzLmFsaWVuLnNldFZpc2libGUodHJ1ZSk7XG4gICAgfVxuICAgIHVwZGF0ZSh0aW1lLCBkZWx0YSkge1xuICAgICAgICBjb25zdCB3ID0gdGhpcy5jYW52YXMud2lkdGg7XG4gICAgICAgIGNvbnN0IGggPSB0aGlzLmNhbnZhcy5oZWlnaHQ7XG4gICAgICAgIHRoaXMucHJldmlvdXMgPSB0aGlzLmVsYXBzZWQ7XG4gICAgICAgIHRoaXMuZWxhcHNlZCArPSBkZWx0YSAqIDAuMDAxO1xuICAgICAgICAvLyB1cGRhdGUgd2hlbiB0aGUgcGVyaW9kIGlzIGV4Y2VlZGVkXG4gICAgICAgIGlmICh0aGlzLmVsYXBzZWQgPiB0aGlzLnBlcmlvZCkge1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHBhdXNlIHdoZW4gd2UgcGFzcyB0aGUgZGVjaXNpb24gdGltZVxuICAgICAgICBjb25zdCBkZWNpc2lvbl90aW1lID0gdGhpcy5wZXJpb2QgKiAwLjU7XG4gICAgICAgIGlmICh0aGlzLnByZXZpb3VzIDwgZGVjaXNpb25fdGltZSAmJiB0aGlzLmVsYXBzZWQgPj0gZGVjaXNpb25fdGltZSkge1xuICAgICAgICAgICAgdGhpcy5nZXRVc2VySW5wdXQoW1wibGVmdFwiLCBcInJpZ2h0XCJdLCB0aGlzLmxhbmUsICh2KSA9PiAodGhpcy5yb2NrZXRfbGFuZSA9IHYpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1ID0gdGhpcy5lbGFwc2VkIC8gdGhpcy5wZXJpb2Q7XG4gICAgICAgIGNvbnN0IGdvYWxfeCA9IHcgLyA0ICsgKHRoaXMubGFuZSAqIHcpIC8gMjtcbiAgICAgICAgY29uc3Qgd2lnZ2xlID0gKHcgLyAyKSAqICgxICsgdGhpcy5zaWduICogTWF0aC5zaW4oMiAqIE1hdGguUEkgKiB0aGlzLmZyZXEgKiB1KSk7XG4gICAgICAgIGNvbnN0IHYgPSBNYXRoLm1pbigxLCAoaCAvIHRoaXMucm9ja2V0X3kpICogdSk7XG4gICAgICAgIHRoaXMuYWxpZW4ueCA9ICgxIC0gdikgKiB3aWdnbGUgKyB2ICogZ29hbF94O1xuICAgICAgICB0aGlzLmFsaWVuLnkgPSB0aGlzLmNhbnZhcy5oZWlnaHQgKiB1O1xuICAgICAgICBjb25zdCByb2NrZXRfeCA9IHcgLyA0ICsgKHRoaXMucm9ja2V0X2xhbmUgKiB3KSAvIDI7XG4gICAgICAgIHRoaXMucm9ja2V0LnggLT0gKHRoaXMucm9ja2V0LnggLSByb2NrZXRfeCkgLyAxMDtcbiAgICB9XG4gICAgcm9ja2V0Q29sbGlkZVdpdGhBbGllbigpIHtcbiAgICAgICAgLy8gZmxhc2hcbiAgICAgICAgdGhpcy5jYW1lcmFzLm1haW4uZmxhc2goKTtcbiAgICAgICAgLy8gSGlkZSB0aGUgYWxpZW5cbiAgICAgICAgdGhpcy5hbGllbi5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgLy8gYmxvd3VwXG4gICAgICAgIHRoaXMucGFydGljbGVzLmVtaXRQYXJ0aWNsZUF0KHRoaXMuYWxpZW4ueCwgdGhpcy5hbGllbi55KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgXCJwaGFzZXJcIjtcbmltcG9ydCB7IENvbnRyb2xTY2VuZSB9IGZyb20gXCIuL2Jhc2VcIjtcbmltcG9ydCB7IEdhbWVTY2VuZSB9IGZyb20gXCIuL2dhbWVcIjtcbmNvbnN0IGNvbmZpZyA9IHtcbiAgICB0aXRsZTogXCJSdW5uZXJcIixcbiAgICB0eXBlOiBQaGFzZXIuQVVUTyxcbiAgICB3aWR0aDogNjAwLFxuICAgIGhlaWdodDogODAwLFxuICAgIC8qXG4gICAgc2NhbGU6IHtcbiAgICAgIG1vZGU6IFBoYXNlci5TY2FsZS5GSVQsXG4gICAgICBhdXRvQ2VudGVyOiBQaGFzZXIuU2NhbGUuQ0VOVEVSX0JPVEhcbiAgICB9LCAqL1xuICAgIHBhcmVudDogXCJnYW1lXCIsXG4gICAgc2NlbmU6IFtHYW1lU2NlbmUsIENvbnRyb2xTY2VuZV0sXG4gICAgcGh5c2ljczoge1xuICAgICAgICBkZWZhdWx0OiBcImFyY2FkZVwiLFxuICAgICAgICBhcmNhZGU6IHtcbiAgICAgICAgICAgIGRlYnVnOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiIzQ0NDQ0NFwiXG59O1xuZXhwb3J0IGNsYXNzIE15R2FtZSBleHRlbmRzIFBoYXNlci5HYW1lIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgc3VwZXIoY29uZmlnKTtcbiAgICB9XG59XG53aW5kb3cub25sb2FkID0gKCkgPT4ge1xuICAgIHZhciBnYW1lID0gbmV3IE15R2FtZShjb25maWcpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n')}]);