!function(I){var g={};function e(C){if(g[C])return g[C].exports;var t=g[C]={i:C,l:!1,exports:{}};return I[C].call(t.exports,t,t.exports,e),t.l=!0,t.exports}e.m=I,e.c=g,e.d=function(I,g,C){e.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:C})},e.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},e.t=function(I,g){if(1&g&&(I=e(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var C=Object.create(null);if(e.r(C),Object.defineProperty(C,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var t in I)e.d(C,t,function(g){return I[g]}.bind(null,t));return C},e.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return e.d(g,"a",g),g},e.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},e.p="",e(e.s=1)}([function(module,exports){eval("module.exports = Phaser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJQaGFzZXJcIj9lYmM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFBoYXNlcjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: external "Phaser"\nvar external_Phaser_ = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/base.ts\n\nclass SwitchBase extends Phaser.Scene {\n    constructor(args) {\n        super(args);\n        this.initialized = false;\n    }\n    getUserInput(choices, correct, func) {\n        if (!this.initialized) {\n            this.events.on("resume", (s, d) => this.userInput(d.choice));\n            /* There is a bug in run, now fixed but not yet released that makes\n             * it recreate instead of restarting a paused scene. I\'ll work around\n             * that by always resuming but I\'ll first need to run to get it started.\n             * I\'ll remove this when run gets released */\n            this.scene.run("ControlScene");\n            this.scene.pause("ControlScene");\n            this.initialized = true;\n        }\n        let inputConfig = { caller: this.scene.key, choices, correct };\n        this.scene.resume("ControlScene", inputConfig);\n        this.scene.pause();\n        this.callback = func;\n    }\n    userInput(choice) {\n        // this method will be called with the user\'s response\n        this.callback(choice);\n    }\n}\nclass ControlScene extends Phaser.Scene {\n    constructor() {\n        super({\n            key: "ControlScene"\n        });\n    }\n    returnInput(value) {\n        this.scene.resume(this.inputConfig.caller, { choice: value });\n        this.scene.pause();\n    }\n    create() {\n        console.log("create control");\n        this.input.keyboard.on("keydown-LEFT", (e) => {\n            // pass response back to caller\n            this.returnInput(0);\n        });\n        this.input.keyboard.on("keydown-RIGHT", (e) => {\n            // pass response back to caller\n            this.returnInput(1);\n        });\n        this.events.on("resume", (e, d) => {\n            this.inputConfig = d;\n            this.scene.pause(d.caller);\n        });\n        document\n            .getElementById("left")\n            .addEventListener("click", e => this.returnInput(0));\n        document\n            .getElementById("right")\n            .addEventListener("click", e => this.returnInput(1));\n        this.input.keyboard.on("keydown-SPACE", (e) => {\n            const choices = document.querySelectorAll("button.choice");\n            let selected = document.querySelector("button.selected");\n            let i = 0;\n            if (selected) {\n                i = ([...choices].indexOf(selected) + 1) % choices.length;\n                selected.classList.remove("selected");\n            }\n            choices[i].classList.add("selected");\n        });\n        this.input.keyboard.on("keydown-ENTER", (e) => {\n            const selected = (document.querySelector("button.selected"));\n            if (selected) {\n                selected.click();\n            }\n        });\n    }\n}\n\n// CONCATENATED MODULE: ./src/game.ts\n\n\nclass game_GameScene extends SwitchBase {\n    constructor() {\n        super({\n            key: "GameScene"\n        });\n        this.elapsed = 0;\n        this.previous = 0; // previous elapsed\n        this.period = 2; // time per cycle\n        this.canvas = document.querySelector("canvas");\n        this.lane = 0;\n        this.rocket_lane = 1;\n        this.rocket_y = 0;\n        this.sign = 1;\n        this.freq = 1.5;\n        this.score = 0;\n    }\n    preload() {\n        this.load.image("alien", "assets/alien.png");\n        this.load.image("rocket", "assets/rocket.png");\n        this.load.image("particle", "assets/particle.png");\n    }\n    create() {\n        console.log("create game");\n        this.scoreDisplay = this.add.text(20, 20, "0");\n        this.rocket_y = this.canvas.height * 0.9;\n        this.alien = this.add.sprite(this.canvas.width / 2, 10, "alien");\n        this.rocket = this.add.sprite((3 * this.canvas.width) / 4, this.rocket_y, "rocket");\n        // Enable physics on rocket and alien sprites\n        this.physics.world.enable([this.rocket, this.alien]);\n        this.collider = this.physics.add.overlap(this.rocket, this.alien, this.rocketCollideWithAlien, null, this);\n        this.particles = this.add.particles("particle");\n        this.emitter = this.particles.createEmitter({\n            angle: { min: 0, max: 360 },\n            speed: { min: 50, max: 200 },\n            quantity: { min: 40, max: 50 },\n            lifespan: { min: 200, max: 500 },\n            alpha: { start: 1, end: 0 },\n            scale: { min: 0.5, max: 0.5 },\n            rotate: { start: 0, end: 360 },\n            gravityY: 800,\n            on: false\n        });\n        this.reset();\n    }\n    reset() {\n        const w = this.canvas.width;\n        this.elapsed = 0;\n        this.lane = Phaser.Math.Between(0, 1);\n        this.sign = 2 * Phaser.Math.Between(0, 1) - 1;\n        this.freq = 0.5 + Math.random() * 2;\n        this.rocket.x = w / 4 + (w / 2) * this.rocket_lane;\n        this.alien.setVisible(true);\n        this.collider.active = true;\n    }\n    update(time, delta) {\n        const w = this.canvas.width;\n        const h = this.canvas.height;\n        this.previous = this.elapsed;\n        this.elapsed += delta * 0.001;\n        // update when the period is exceeded\n        if (this.elapsed > this.period) {\n            this.reset();\n        }\n        // pause when we pass the decision time\n        const decision_time = this.period * 0.5;\n        if (this.previous < decision_time && this.elapsed >= decision_time) {\n            this.getUserInput(["left", "right"], this.lane, (v) => (this.rocket_lane = v));\n        }\n        const u = this.elapsed / this.period;\n        const goal_x = w / 4 + (this.lane * w) / 2;\n        const wiggle = (w / 2) * (1 + this.sign * Math.sin(2 * Math.PI * this.freq * u));\n        const v = Math.min(1, (h / this.rocket_y) * u);\n        this.alien.x = (1 - v) * wiggle + v * goal_x;\n        this.alien.y = this.canvas.height * u;\n        const rocket_x = w / 4 + (this.rocket_lane * w) / 2;\n        this.rocket.x -= (this.rocket.x - rocket_x) / 10;\n    }\n    rocketCollideWithAlien() {\n        // flash\n        this.cameras.main.flash();\n        // Hide the alien\n        this.alien.visible = false;\n        // prevent multiple collisions\n        this.collider.active = false;\n        // blowup\n        this.particles.emitParticleAt(this.alien.x, this.alien.y);\n        // update score\n        this.score += 1;\n        this.scoreDisplay.setText("" + this.score);\n    }\n}\n\n// CONCATENATED MODULE: ./src/app.ts\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MyGame", function() { return MyGame; });\n\n\n\nconst config = {\n    title: "Runner",\n    type: Phaser.AUTO,\n    width: 600,\n    height: 800,\n    /*\n    scale: {\n      mode: Phaser.Scale.FIT,\n      autoCenter: Phaser.Scale.CENTER_BOTH\n    }, */\n    parent: "game",\n    scene: [game_GameScene, ControlScene],\n    physics: {\n        default: "arcade",\n        arcade: {\n            debug: false\n        }\n    },\n    backgroundColor: "#444444"\n};\nclass MyGame extends Phaser.Game {\n    constructor(config) {\n        super(config);\n    }\n}\nwindow.onload = () => {\n    var game = new MyGame(config);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}]);