!function(I){var g={};function C(A){if(g[A])return g[A].exports;var t=g[A]={i:A,l:!1,exports:{}};return I[A].call(t.exports,t,t.exports,C),t.l=!0,t.exports}C.m=I,C.c=g,C.d=function(I,g,A){C.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:A})},C.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},C.t=function(I,g){if(1&g&&(I=C(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var A=Object.create(null);if(C.r(A),Object.defineProperty(A,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var t in I)C.d(A,t,function(g){return I[g]}.bind(null,t));return A},C.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return C.d(g,"a",g),g},C.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},C.p="",C(C.s=1)}([function(module,exports){eval("module.exports = Phaser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJQaGFzZXJcIj9lYmM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFBoYXNlcjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: external "Phaser"\nvar external_Phaser_ = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/settings.ts\nconst key = "space-config";\nconst version = 2;\nclass Settings {\n    constructor() {\n        this.mode = "auto";\n        this.sound = true;\n        this.asteroids = true;\n    }\n    persist() {\n        const data = {\n            version: version,\n            mode: this.mode,\n            sound: this.sound,\n            asteroids: this.asteroids\n        };\n        const json = JSON.stringify(data);\n        localStorage.setItem(key, json);\n    }\n    restore() {\n        const json = localStorage.getItem(key);\n        if (json) {\n            const data = JSON.parse(json);\n            if (data.version == version) {\n                this.mode = data.mode;\n                this.sound = data.sound;\n                this.asteroids = data.asteroids;\n            }\n        }\n    }\n}\nconst settings = new Settings();\nsettings.restore();\n/* harmony default export */ var src_settings = (settings);\n\n// CONCATENATED MODULE: ./src/base.ts\n\n\nclass SwitchBase extends Phaser.Scene {\n    constructor(args) {\n        super(args);\n        this.initialized = false;\n    }\n    getUserInput(correct, func) {\n        if (!this.initialized) {\n            this.events.on("resume", (s, d) => this.userInput(d.choice));\n            /* There is a bug in run, now fixed but not yet released that makes\n             * it recreate instead of restarting a paused scene. I\'ll work around\n             * that by always resuming but I\'ll first need to run to get it started.\n             * I\'ll remove this when run gets released */\n            this.scene.run("ControlScene");\n            this.scene.pause("ControlScene");\n            this.initialized = true;\n        }\n        let inputConfig = { caller: this.scene.key, correct };\n        this.scene.resume("ControlScene", inputConfig);\n        this.scene.pause();\n        this.callback = func;\n    }\n    userInput(choice) {\n        // this method will be called with the user\'s response\n        this.callback(choice);\n    }\n}\nclass base_ControlScene extends Phaser.Scene {\n    constructor() {\n        super({\n            key: "ControlScene"\n        });\n    }\n    returnInput(value) {\n        if (src_settings.mode == "one") {\n            value = this.inputConfig.correct;\n        }\n        this.scene.resume(this.inputConfig.caller, { choice: value });\n        this.scene.pause();\n    }\n    setSelected(choice) {\n        const choices = document.querySelectorAll("button.choice");\n        let selected = document.querySelector("button.selected");\n        if (selected) {\n            selected.classList.remove("selected");\n        }\n        choices[choice].classList.add("selected");\n    }\n    create() {\n        console.log("create control");\n        this.input.keyboard.on("keydown-LEFT", (e) => {\n            // pass response back to caller\n            this.returnInput(0);\n        });\n        this.input.keyboard.on("keydown-RIGHT", (e) => {\n            // pass response back to caller\n            this.returnInput(1);\n        });\n        this.events.on("resume", (e, d) => {\n            this.inputConfig = d;\n            this.scene.pause(d.caller);\n            if (src_settings.mode == "auto") {\n                this.time.delayedCall(1000, () => {\n                    this.setSelected(this.inputConfig.correct);\n                    this.returnInput(this.inputConfig.correct);\n                }, [], this);\n            }\n        });\n        document\n            .getElementById("left")\n            .addEventListener("click", e => this.returnInput(0));\n        document\n            .getElementById("right")\n            .addEventListener("click", e => this.returnInput(1));\n        this.input.keyboard.on("keydown-SPACE", (e) => {\n            const choices = document.querySelectorAll("button.choice");\n            let selected = document.querySelector("button.selected");\n            let i = 0;\n            if (selected) {\n                i = ([...choices].indexOf(selected) + 1) % choices.length;\n                selected.classList.remove("selected");\n            }\n            choices[i].classList.add("selected");\n        });\n        this.input.keyboard.on("keydown-ENTER", (e) => {\n            const selected = (document.querySelector("button.selected"));\n            if (selected) {\n                selected.click();\n            }\n        });\n    }\n}\n\n// CONCATENATED MODULE: ./src/game.ts\n\n\n\nclass game_GameScene extends SwitchBase {\n    constructor() {\n        super({\n            key: "GameScene"\n        });\n        this.elapsed = 0;\n        this.previous = 0; // previous elapsed\n        this.period = 2; // time per cycle\n        this.canvas = document.querySelector("canvas");\n        this.lane = 0;\n        this.rocket_lane = 1;\n        this.rocket_y = 0;\n        this.sign = 1;\n        this.freq = 1.5;\n        this.score = 0;\n        this.popSound = null;\n        this.alienSound = null;\n        this.explodeSound = null;\n    }\n    preload() {\n        // this.load.image("alien", "assets/alien.png");\n        this.load.spritesheet("alien", "assets/alien-sheet.png", {\n            frameWidth: 73,\n            frameHeight: 44,\n            startFrame: 0,\n            endFrame: 39\n        });\n        this.load.spritesheet("asteroid", "assets/asteroid-sheet.png", {\n            frameWidth: 120,\n            frameHeight: 120,\n            startFrame: 0,\n            endFrame: 15\n        });\n        this.load.image("rocket", "assets/rocket.png");\n        this.load.image("particle", "assets/particle.png");\n        if (src_settings.sound) {\n            this.load.audio("pop", "assets/success.mp3");\n            this.load.audio("alienSound", "assets/alien.mp3");\n            this.load.audio("explodeSound", "assets/explode.mp3");\n        }\n    }\n    create() {\n        console.log("create game");\n        this.scoreDisplay = this.add.text(20, 20, "0", { fontSize: 20 });\n        this.rocket_y = this.canvas.height * 0.9;\n        this.alien = this.add.sprite(this.canvas.width / 2, 10, "alien");\n        for (let i = 0; i < 10; i++) {\n            let name = `ship${i}`;\n            let a = this.anims.create({\n                key: name,\n                frames: this.anims.generateFrameNumbers("alien", {\n                    start: i * 4,\n                    end: i * 4 + 3\n                }),\n                frameRate: 2,\n                repeat: -1\n            });\n            this.alien.anims.load(name);\n        }\n        this.asteroid = this.add.sprite(0, 0, "asteroid");\n        let anim = this.anims.create({\n            key: "spin",\n            frames: this.anims.generateFrameNumbers("asteroid", {}),\n            frameRate: 20,\n            repeat: -1\n        });\n        this.asteroid.anims.load("spin");\n        this.asteroid.anims.play("spin");\n        this.rocket = this.add.sprite((3 * this.canvas.width) / 4, this.rocket_y, "rocket");\n        this.rocket.setScale(0.5);\n        this.moveLeft = this.tweens.add({\n            targets: this.rocket,\n            props: {\n                x: { value: this.canvas.width / 4, duration: 500 },\n                rotation: {\n                    value: -Math.PI / 2,\n                    duration: 250,\n                    yoyo: true,\n                    repeat: 0,\n                    ease: "Sine.easeInOut"\n                }\n            },\n            paused: true\n        });\n        this.moveRight = this.tweens.add({\n            targets: this.rocket,\n            props: {\n                x: { value: (3 * this.canvas.width) / 4, duration: 500 },\n                rotation: { value: Math.PI / 2, duration: 250, yoyo: true, repeat: 0 }\n            },\n            paused: true\n        });\n        // Enable physics on rocket and alien sprites\n        this.physics.world.enable([this.rocket, this.alien, this.asteroid]);\n        this.collider = this.physics.add.overlap(this.rocket, [this.alien, this.asteroid], this.rocketCollideWithAlien, null, this);\n        this.particles = this.add.particles("particle");\n        this.emitter = this.particles.createEmitter({\n            angle: { min: 0, max: 360 },\n            speed: { min: 50, max: 200 },\n            quantity: { min: 40, max: 50 },\n            lifespan: { min: 200, max: 500 },\n            alpha: { start: 1, end: 0 },\n            scale: { min: 0.5, max: 0.5 },\n            rotate: { start: 0, end: 360 },\n            gravityY: 800,\n            on: false\n        });\n        this.reset();\n        if (src_settings.sound) {\n            this.popSound = this.sound.add("pop");\n            this.alienSound = (this.sound.add("alienSound"));\n            this.alienSound.setLoop(true);\n            this.alienSound.play();\n            this.explodeSound = (this.sound.add("explodeSound"));\n        }\n    }\n    reset() {\n        const w = this.canvas.width;\n        this.elapsed = 0;\n        this.lane = Phaser.Math.Between(0, 1);\n        this.sign = 2 * Phaser.Math.Between(0, 1) - 1;\n        this.freq = 0.5 + Math.random() * 2;\n        if (this.score < 20 || Math.random() > 0.2) {\n            this.target = this.alien;\n            let name = `ship${Phaser.Math.Between(0, 9)}`;\n            this.alien.anims.play(name);\n            this.asteroid.y = -100;\n            if (this.alienSound) {\n                this.alienSound.setSeek(0);\n                this.alienSound.setRate(this.freq);\n                this.alienSound.play();\n            }\n        }\n        else {\n            this.target = this.asteroid;\n            this.alien.y = -100;\n            if (this.alienSound)\n                this.alienSound.stop();\n        }\n        this.target.setVisible(true);\n        this.collider.active = true;\n    }\n    update(time, delta) {\n        const w = this.canvas.width;\n        const h = this.canvas.height;\n        this.previous = this.elapsed;\n        this.elapsed += delta * 0.001;\n        // update when the period is exceeded\n        if (this.elapsed > this.period) {\n            this.reset();\n        }\n        // pause when we pass the decision time\n        const decision_time = this.period * 0.5;\n        if (this.previous < decision_time && this.elapsed >= decision_time) {\n            this.getUserInput(this.target === this.alien ? this.lane : 1 - this.lane, \n            // (v: number) => (this.rocket_lane = v)\n            (v) => {\n                const rocket_x = w / 4 + (v * w) / 2;\n                if (this.rocket.x < rocket_x) {\n                    this.moveRight.play();\n                }\n                else if (this.rocket.x > rocket_x) {\n                    this.moveLeft.play();\n                }\n            });\n        }\n        const u = this.elapsed / this.period;\n        const goal_x = w / 4 + (this.lane * w) / 2;\n        const wiggle = w / 2 +\n            ((Math.min(10, this.score) * w) / 20) *\n                (this.sign * Math.sin(2 * Math.PI * this.freq * u));\n        const v = Math.min(1, (h / this.rocket_y) * u);\n        this.target.x = (1 - v) * wiggle + v * goal_x;\n        this.target.y = this.canvas.height * u;\n        if (this.alienSound)\n            this.alienSound.setVolume(u);\n        if (u % 0.2 < 1 / 60) {\n            // this.alien.setTint(0xffffff * Math.random());\n        }\n    }\n    rocketCollideWithAlien() {\n        // this.sound.play("pop");\n        if (this.target == this.alien) {\n            if (this.popSound)\n                this.popSound.play();\n            this.cameras.main.flash();\n        }\n        else {\n            if (this.explodeSound)\n                this.explodeSound.play();\n            this.cameras.main.flash(500, 255, 0, 0);\n        }\n        // flash\n        // Hide the alien\n        this.target.visible = false;\n        // prevent multiple collisions\n        this.collider.active = false;\n        // blowup\n        this.particles.emitParticleAt(this.target.x, this.target.y);\n        // update score\n        this.score += this.target === this.alien ? 1 : -1;\n        this.scoreDisplay.setText("" + this.score);\n    }\n}\n\n// CONCATENATED MODULE: ./src/app.ts\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MyGame", function() { return MyGame; });\n\n\n\n\nconst config = {\n    title: "Space",\n    type: Phaser.AUTO,\n    width: 600,\n    height: 800,\n    scale: {\n        mode: Phaser.Scale.RESIZE,\n        autoCenter: Phaser.Scale.CENTER_BOTH\n    },\n    parent: "game",\n    scene: [game_GameScene, base_ControlScene],\n    physics: {\n        default: "arcade",\n        arcade: {\n            debug: false\n        }\n    },\n    backgroundColor: "#444444"\n};\nclass MyGame extends Phaser.Game {\n    constructor(config) {\n        super(config);\n    }\n}\nwindow.onload = () => {\n    let game = null;\n    document.getElementById("setup").addEventListener("click", () => {\n        if (game) {\n            game.destroy(true);\n            game = null;\n        }\n        document.body.classList.value = "settings";\n    });\n    document.getElementById("playButton").addEventListener("click", () => {\n        document.body.classList.value = "play";\n        game = new MyGame(config);\n    });\n    [...document.querySelectorAll("input[name=mode]")].map((node) => (node.checked = node.value == src_settings.mode));\n    const soundInput = document.getElementById("sound");\n    soundInput.checked = src_settings.sound;\n    const asteroidsInput = document.getElementById("asteroids");\n    asteroidsInput.checked = src_settings.asteroids;\n    document.getElementById("settings").addEventListener("change", e => {\n        console.log("change");\n        const modeInput = (document.querySelector("input[name=mode]:checked"));\n        const mode = modeInput.value;\n        src_settings.mode = mode;\n        const soundInput = document.getElementById("sound");\n        src_settings.sound = soundInput.checked;\n        const asteroidsInput = (document.getElementById("asteroids"));\n        src_settings.asteroids = asteroidsInput.checked;\n        src_settings.persist();\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}]);